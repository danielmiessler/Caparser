#!/usr/bin/ruby

require 'json'
require 'net/http'
require 'uri'
require 'digest/md5'

@api_key = ''
# Just a reminder check.
if @api_key == ''
	puts "You must use a VT API key. Without one, there can be no results."
	exit(0)
end


@resource_url = nil

@api_path = {	'file'	=>	'https://www.virustotal.com/vtapi/v2/file/report',
				'url'	=>	'https://www.virustotal.com/vtapi/v2/url/report'}

@options  = {	'verbose'	=>	false,
				'permalink'	=>	false,
				'file'		=>	false,
				'url'		=>	false}

def parse_args

	args = ARGV[0].scan(/./)

	# prevent url and file flag being called together
	if args.include? 'f' and args.include? 'u'
		puts "Please choose only one file or url argument at a time."
		exit 0
	end

	case args.include?

	when 'f'
		@resource_url = @api_path['file']
		@options['file] = true

	when 'u'
		@resource_url = @api_path['url']
		@options['url'] = true
	
	when 'v'
		@options['verbos'] = true
			
	when 'p'
		@options['permalink'] = true

	when '?'
		print_usage
	end

end	


def get_file_hash(file_path)
	if File.exist?(file_path)
		file_hash = Digest::MD5.file(file_path).hexdigest 
		return file_hash
	else
		return "File does not exist."
	end
end

def vt_check(resource_to_check, resource_type)
	uri = URI.parse(@resource_url)
	parameters = {	"resource" => "#{resource_to_check}", 
					"apikey" => "#{@api_key}"}
	begin
		uri.query=URI.encode_www_form(parameters)
		res = Net::HTTP.get_response(uri)
		response = res.body
		begin
			result = JSON.parse(response)
			
			if result['response_code'] == 1
				if result['positives'].to_i > 0
					puts "#{result['positives']} out of #{result['total']} services reported this as malicious."
					if @options['verbose']
						puts "Services reporting this as malicious:"
						result["scans"].each_key do |key|
							if result["scans"]["#{key}"]["detected"].to_s == "true"
								puts key
							end
						end		
					end
				else
					puts "This #{resource_type} appears to be clean, dammit."
				end
				if @options["permalink"] and result['positives'].to_i > 0  
					puts result['permalink']
				end
			else
				puts "There is currently no data on this #{resource_type}. You may want to submit it to be safe."
			end
		rescue => e
			puts "There was an error with this call: #{e}"
		end			

	rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
		puts "An error occurred when attempting to connect to the VirusTotal service."
	end

end

def print_usage

	STDOUT.puts <<-EOF

Please provide arguments

Usage:
	vtcheck -[f | u [vp]] [file...]

	Options:
	-f		check file
	-u		check url
	-v		add verbose output to one of the previous commands
	-p		print permalink to the VT report
	-?		print help menu
EOF
end

if ARGV[0] && ARGV[1]
	parse_args
	if (@options['url'] || @options['file']) 
		if ARGV[1]
			if  @options['url']
				vt_check("#{ARGV[1]}", "address")
			elsif @options['file']
				vt_check(get_file_hash("#{ARGV[1]}"), "file")
			end
		else
			print_usage
			exit 0
		end
	end
else
	print_usage
	exit 0
end
